// Fill out your copyright notice in the Description page of Project Settings.


#include "TriVectorManager.h"

void ATriVectorManager::InitializePlates()
{
	FColor_info c_info;

	// Up
	c_info.normal_f = { 232,234,258,260,261,262,264,267,272,282,295,297,299,305,306,307,308,309,310,312,313,314,315,316,317,318,330,334,350,335,352,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,371,372,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,411,412,431,432,433,434,435,436,437,438,439,440,441,442,443,444,458,459,460,463,464,465,466,467,468,469,470,471,472,473,475,477,478,479,480,481,482,483,486,488,516,519,520 };
	c_info.validResponses = { "Up" };
	all_plates.Add(c_info);
	Cleareverything(c_info);

	// Up
	c_info.normal_f = { 135,136,164,177,178,179,180,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,198,207,214,215,216,224,225,227,228,229,230,231,232,233,234,235,236,244,245,246,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,271,272,273,274,275,276,277,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,329,330,331,332,333,348,334,350,335,352,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,411,412,413,433,434,435,436,437,438,439,440,441,442,443,444,458,459,460,463,465,468,469,470,472,479,480,481,482,483,516,519,520 };
	c_info.validResponses = { "Up" };
	all_plates.Add(c_info);
	Cleareverything(c_info);

	// Right
	c_info.normal_f = { 214,215,232,234,236,243,260,261,262,264,275,282,283,290,291,293,294,295,296,297,298,299,300,301,303,304,305,306,307,308,309,310,312,313,314,315,316,317,318,319,320,321,324,325,327,328,329,330,346,347,348,349,350,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,381,382,393,395,396,397,398,399,400,404,405,406,411,412,413,414,415,416,417,418,419,420,421,429,431,432,433,434,435,437,438,439,440,458,459,460,463,465,469,470,471,472,479,480,481,559,560,579,581,583};
	c_info.validResponses = { "Right" };
	all_plates.Add(c_info);
	Cleareverything(c_info);

	// Right
	c_info.normal_f = { 124,125,126,145,146,147,164,165,167,168,170,172,174,175,176,177,178,179,180,181,182,183,194,195,198,202,203,204,205,206,207,208,209,210,214,215,216,224,225,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,248,249,250,251,252,253,254,261,262,263,264,265,266,267,268,269,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,348,334,350,335,352,336,337,338,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,411,412,413,414,415,416,417,418,419,420,421,429,432,433,434,435,436,437,438,439,440,441,458,459,460,463,465,469,470,472,479,480,481,483,516,519,520,552,590,559,560};
	c_info.validResponses = { "Right" };
	all_plates.Add(c_info);
	Cleareverything(c_info);

	// Down
	c_info.normal_f = { 125,135,136,164,165,167,168,170,172,174,175,176,177,178,179,180,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,198,214,215,216,224,225,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,271,272,273,274,275,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,348,334,350,335,352,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,411,412,413,414,415,416,417,418,419,420,421,429,433,434,435,436,437,438,439,440,441,442,443,444,458,459,460,463,465,479,480,481,482,483,516,519,520,559,560};
	c_info.validResponses = { "Down" };
	all_plates.Add(c_info);
	Cleareverything(c_info);

	// Down
	c_info.normal_f = { 135,136,164,176,177,178,179,180,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,198,207,214,215,216,224,225,227,228,229,230,231,232,233,234,235,236,237,241,242,243,244,245,246,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,271,272,273,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,348,334,350,335,352,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,411,412,413,414,415,416,417,418,419,420,421,429,433,434,435,436,437,438,439,440,441,442,443,444,458,459,460,463,479,480,481,482,483,516,519,520,559,560};
	c_info.validResponses = { "Down" };
	all_plates.Add(c_info);
	Cleareverything(c_info);

	// Left
	c_info.normal_f = { 135,136,164,177,178,179,180,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,198,207,214,225,227,228,229,230,231,232,233,234,235,236,237,239,241,242,243,244,245,246,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,271,272,273,274,275,276,277,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,348,334,350,335,352,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,400,401,402,403,404,405,406,411,412,413,414,415,416,417,418,419,420,421,422,423,424,433,434,435,436,437,438,439,440,441,442,443,444,458,459,460,463,465,468,469,470,472,479,480,481,482,483,559,560};
	c_info.validResponses = { "Left" };
	all_plates.Add(c_info);
	Cleareverything(c_info);

	// Left
	c_info.normal_f = { 135,136,164,177,178,179,180,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,198,199,200,202,203,204,206,207,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,239,241,242,243,244,245,246,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,348,334,350,335,352,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,399,400,401,402,403,404,405,406,411,412,413,414,415,416,417,418,419,420,421,422,423,424,429,433,434,435,436,437,438,439,440,441,442,443,444,458,459,460,463,465,468,469,470,472,479,480,481,482,483,518,519,520,521,559,560 };
	c_info.validResponses = { "Left" };
	all_plates.Add(c_info);
	Cleareverything(c_info);
}

void ATriVectorManager::InitializeColors() {
	protan_hex = { "#040301", "#050301", "#070201", "#080201", "#090200", "#0a0100", "#0b0100", "#0c0100", "#0d0000", "#0e0000", "#0f0000", "#100000", "#110000", "#120000", "#120000", "#130000", "#140000", "#150000", "#150000", "#160000", "#170000", "#170000", "#180000", "#190000", "#190000", "#1a0000", "#1a0000", "#1b0000", "#1b0000", "#1c0000", "#1c0000", "#1d0000", "#1d0000", "#1e0000", "#1e0000", "#1f0000", "#1f0000", "#200000", "#200000", "#210000", "#210000", "#220000", "#220000", "#230000", "#230000", "#230000", "#240000", "#240000", "#250000", "#250000", "#250000", "#260000", "#260000", "#270000", "#270000", "#270000", "#280000", "#280000", "#280000", "#290000", "#290000", "#2a0000", "#2a0000", "#2a0000", "#2b0000", "#2b0000", "#2b0000", "#2c0000", "#2c0000", "#2c0000", "#2d0000", "#2d0000", "#2d0000", "#2e0000", "#2e0000", "#2e0000", "#2e0000", "#2f0000", "#2f0000", "#2f0000", "#300000", "#300000", "#300000", "#310000", "#310000", "#310000", "#310000", "#320000", "#320000", "#320000", "#330000", "#330000", "#330000", "#330000", "#340000", "#340000", "#340000", "#350000", "#350000", "#350000" };
	deutan_hex = { "#040301", "#030401", "#020401", "#010401", "#000502", "#000502", "#000502", "#000602", "#000602", "#000602", "#000702", "#000702", "#000703", "#000803", "#000803", "#000803", "#000903", "#000903", "#000903", "#000a03", "#000a04", "#000a04", "#000b04", "#000b04", "#000b04", "#000c04", "#000c04", "#000c05", "#000d05", "#000d05", "#000d05", "#000e05", "#000e05", "#000e05", "#000e05", "#000f06", "#000f06", "#000f06", "#000f06", "#001006", "#001006", "#001006", "#001006", "#001107", "#001107", "#001107", "#001107", "#001207", "#001207", "#001207", "#001207", "#001208", "#001308", "#001308", "#001308", "#001308", "#001408", "#001408", "#001409", "#001409", "#001409", "#001509", "#001509", "#001509", "#001509", "#001509", "#00160a", "#00160a", "#00160a", "#00160a", "#00160a", "#00170a", "#00170a", "#00170a", "#00170b", "#00170b", "#00170b", "#00180b", "#00180b", "#00180b", "#00180b", "#00180b", "#00180b", "#00190c", "#00190c", "#00190c", "#00190c", "#00190c", "#00190c", "#001a0c", "#001a0c", "#001a0c", "#001a0d", "#001a0d", "#001a0d", "#001b0d", "#001b0d", "#001b0d", "#001b0d", "#001b0d" };
	tritan_hex = {};
	threshold_along_confusion_lines = {0, 0, 0};

	//placeholders
}

void ATriVectorManager::ColorThesePlates(TArray<AStaticMeshActor*> ovalPlates, int32 coloredPlate)
{
	//background coloring
	for (int32 i = 0; i < ovalPlates.Num(); i++) {
		UMaterialInstanceDynamic* plate_material = ovalPlates[i]->GetStaticMeshComponent()->CreateAndSetMaterialInstanceDynamic(0);
		FLinearColor current_color = FLinearColor(FColor(67, 44, 44, 1));
		if (plate_material)
		{
			plate_material->SetVectorParameterValue(TEXT("plate"), current_color);
		}
	}

	//foreground coloring
	for (int32 i = 0; i < all_plates[coloredPlate].normal_f.Num(); i++) {
		int32 j = all_plates[coloredPlate].normal_f[i];
		j = j > 211 ? j : j - 1;
		UMaterialInstanceDynamic* plate_material = ovalPlates[j]->GetStaticMeshComponent()->CreateAndSetMaterialInstanceDynamic(0);
		FLinearColor current_color = FLinearColor(FColor(123, 65, 38, 1));
		if (plate_material)
		{
			plate_material->SetVectorParameterValue(TEXT("plate"), current_color);
		}
	}

	return;
}

void ATriVectorManager::AssessResponses(TMap<int32, FString> responses, FString& out)
{
	TArray<int32> count = { 0, 0, 0, 0, 0 };
	for (int32 i = 0; i < all_plates.Num(); i++)
	{
		for (int32 j = 0; j < 5; j++)
		{
			if (responses.Find(i)->Equals(all_plates[i].validResponses[j])) count[j]++;
		}
	}
	int32 max = -1, max_idx = -1;
	for (int32 j = 0; j < 5; j++)
	{
		if (max < count[j]) {
			max = count[j];
			max_idx = j;
		}
		GEngine->AddOnScreenDebugMessage(-1, 5.f, FColor::White, FString::Printf(TEXT("%d\n"), count[j]));
	}

	GEngine->AddOnScreenDebugMessage(-1, 5.f, FColor::White, FString::Printf(TEXT("MAX_IDX: %d"), max_idx));
	TArray<FString> which = { "normal","strong_protan", "mild_protan", "strong_deutan", "mild_deutan" };
	if (max_idx >= 0) out = which[max_idx];
	else out = "uncertain";
	return;
}