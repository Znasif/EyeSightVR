// Fill out your copyright notice in the Description page of Project Settings.

#include "TriVectorManager.h"

void ATriVectorManager::InitializePlates()
{
	FColor_info c_info;

	// Up
	c_info.normal_f = { 232,234,258,260,261,262,264,267,272,282,295,297,299,305,306,307,308,309,310,312,313,314,315,316,317,318,330,334,350,335,352,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,371,372,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,411,412,431,432,433,434,435,436,437,438,439,440,441,442,443,444,458,459,460,463,464,465,466,467,468,469,470,471,472,473,475,477,478,479,480,481,482,483,486,488,516,519,520 };
	c_info.validResponses = { "Up" };
	all_plates.Add(c_info);
	Cleareverything(c_info);

	// Up
	c_info.normal_f = { 135,136,164,177,178,179,180,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,198,207,214,215,216,224,225,227,228,229,230,231,232,233,234,235,236,244,245,246,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,271,272,273,274,275,276,277,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,329,330,331,332,333,348,334,350,335,352,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,411,412,413,433,434,435,436,437,438,439,440,441,442,443,444,458,459,460,463,465,468,469,470,472,479,480,481,482,483,516,519,520 };
	c_info.validResponses = { "Up" };
	all_plates.Add(c_info);
	Cleareverything(c_info);

	// Right
	c_info.normal_f = { 214,215,232,234,236,243,260,261,262,264,275,282,283,290,291,293,294,295,296,297,298,299,300,301,303,304,305,306,307,308,309,310,312,313,314,315,316,317,318,319,320,321,324,325,327,328,329,330,346,347,348,349,350,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,381,382,393,395,396,397,398,399,400,404,405,406,411,412,413,414,415,416,417,418,419,420,421,429,431,432,433,434,435,437,438,439,440,458,459,460,463,465,469,470,471,472,479,480,481,559,560,579,581,583};
	c_info.validResponses = { "Right" };	
	all_plates.Add(c_info);
	Cleareverything(c_info);

	// Right
	c_info.normal_f = { 124,125,126,145,146,147,164,165,167,168,170,172,174,175,176,177,178,179,180,181,182,183,194,195,198,202,203,204,205,206,207,208,209,210,214,215,216,224,225,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,248,249,250,251,252,253,254,261,262,263,264,265,266,267,268,269,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,348,334,350,335,352,336,337,338,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,411,412,413,414,415,416,417,418,419,420,421,429,432,433,434,435,436,437,438,439,440,441,458,459,460,463,465,469,470,472,479,480,481,483,516,519,520,552,590,559,560};
	c_info.validResponses = { "Right" };
	all_plates.Add(c_info);
	Cleareverything(c_info);

	// Down
	c_info.normal_f = { 125,135,136,164,165,167,168,170,172,174,175,176,177,178,179,180,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,198,214,215,216,224,225,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,271,272,273,274,275,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,348,334,350,335,352,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,411,412,413,414,415,416,417,418,419,420,421,429,433,434,435,436,437,438,439,440,441,442,443,444,458,459,460,463,465,479,480,481,482,483,516,519,520,559,560};
	c_info.validResponses = { "Down" };
	all_plates.Add(c_info);
	Cleareverything(c_info);

	// Down
	c_info.normal_f = { 135,136,164,176,177,178,179,180,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,198,207,214,215,216,224,225,227,228,229,230,231,232,233,234,235,236,237,241,242,243,244,245,246,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,271,272,273,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,348,334,350,335,352,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,411,412,413,414,415,416,417,418,419,420,421,429,433,434,435,436,437,438,439,440,441,442,443,444,458,459,460,463,479,480,481,482,483,516,519,520,559,560};
	c_info.validResponses = { "Down" };
	all_plates.Add(c_info);
	Cleareverything(c_info);

	// Left
	c_info.normal_f = { 135,136,164,177,178,179,180,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,198,207,214,225,227,228,229,230,231,232,233,234,235,236,237,239,241,242,243,244,245,246,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,271,272,273,274,275,276,277,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,348,334,350,335,352,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,400,401,402,403,404,405,406,411,412,413,414,415,416,417,418,419,420,421,422,423,424,433,434,435,436,437,438,439,440,441,442,443,444,458,459,460,463,465,468,469,470,472,479,480,481,482,483,559,560};
	c_info.validResponses = { "Left" };
	all_plates.Add(c_info);
	Cleareverything(c_info);

	// Left
	c_info.normal_f = { 135,136,164,177,178,179,180,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,198,199,200,202,203,204,206,207,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,239,241,242,243,244,245,246,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,348,334,350,335,352,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,399,400,401,402,403,404,405,406,411,412,413,414,415,416,417,418,419,420,421,422,423,424,429,433,434,435,436,437,438,439,440,441,442,443,444,458,459,460,463,465,468,469,470,472,479,480,481,482,483,518,519,520,521,559,560 };
	c_info.validResponses = { "Left" };
	all_plates.Add(c_info);
	Cleareverything(c_info);
}

void ATriVectorManager::InitializeColors() {
	protan_hex = { "#5b4c4e", "#6f5d5f", "#6e5d5f", "#665658", "#6e5c5f", "#957e81", "#655457", "#887376", "#90797d", "#a07d82", "#816468", "#6a5255", "#8c6d72", "#9c7a7f", "#83656a", "#634c4f", "#8c6d71", "#664f52", "#835e64", "#64474c", "#7d5a5f", "#a5787f", "#9f7379", "#77555a", "#6f5054", "#a1757b", "#63464a", "#7d535a", "#ab737c", "#a46e76", "#82575d", "#ab737c", "#744d53", "#7f545b", "#aa737b", "#6a464b", "#9e636d", "#b7737e", "#835159", "#6d4349", "#ad6d77", "#a76973", "#925b64", "#935c65", "#945d66", "#a05d68", "#804a53", "#a5606c", "#9f5d68", "#b16874", "#7c4750", "#b66b78", "#9d5b66", "#a8636e", "#93505b", "#c26b7a", "#874953", "#b2626f", "#c16b79", "#aa5d6a", "#7c424c", "#99535f", "#864852", "#a85664", "#ac5867", "#c26475", "#a85664", "#bd6171", "#954b58", "#c66677", "#974d5a", "#ad5967", "#bc5a6c", "#ac5262", "#853e4b", "#b55668", "#c45e71", "#924452", "#b85869", "#c05c6f", "#954654", "#a94b5d", "#cc5c71", "#c2576b", "#b14e61", "#b75164", "#cf5d72", "#d15e74", "#913f4f", "#944050" };
	deutan_hex = { "#8a737f", "#594952", "#63525b", "#65535d", "#937b88", "#846e7a", "#99808e", "#89737f", "#705d68", "#947283", "#654d59", "#987587", "#836474", "#a17c8f", "#967385", "#826473", "#826474", "#654d5a", "#865f73", "#815b6e", "#896175", "#704f60", "#845e71", "#644656", "#9f7289", "#9a6e84", "#a77890", "#95637c", "#a36c88", "#95627c", "#a06a85", "#774e63", "#a56d89", "#694456", "#a66f8b", "#7c5167", "#87526d", "#a76787", "#ac6a8b", "#b87295", "#74465d", "#88536e", "#76475f", "#b67194", "#804e67", "#945475", "#7a4460", "#8f5170", "#8e506f", "#a15c7f", "#a05b7f", "#ac6388", "#905271", "#7a445f", "#ad5c86", "#8a486a", "#b6618d", "#773d5b", "#9e537a", "#7f4262", "#bd6592", "#c16795", "#964f73", "#9d4c76", "#ba5b8d", "#9d4c77", "#cb649a", "#ca6399", "#b85a8b", "#7e3c5e", "#8d446a", "#853f63", "#cc5d98", "#994471", "#c45991", "#c0578f", "#a5497a", "#b65287", "#a94b7d", "#d15f9c", "#d15f9c", "#9e4072", "#d15798", "#b44a83", "#d3589a", "#953c6c", "#bd4e8a", "#9f4074", "#d75a9d", "#c65291" };
	tritan_hex = { "#615d6c", "#5c5866", "#787385", "#817c8f", "#837d91", "#524e5b", "#605c6b", "#807b8e", "#6f6b7c", "#87809c", "#8a82a0", "#565165", "#867f9b", "#827b97", "#756e87", "#867f9b", "#6b647c", "#6c667d", "#8a80a6", "#8a7fa5", "#736a8b", "#69617f", "#797092", "#665d7b", "#7e7498", "#8d82a9", "#72698a", "#8c7faf", "#7f729e", "#5f5577", "#7f729e", "#897baa", "#8477a4", "#5d5375", "#615779", "#7e729d", "#8979b1", "#564b70", "#8272a7", "#5f547c", "#7b6c9e", "#695d88", "#8a7ab2", "#8e7eb7", "#8b7ab2", "#5c4e7b", "#5f517f", "#655787", "#8472b0", "#7c6aa4", "#8b78b9", "#8f7bbe", "#736399", "#806eab", "#806baf", "#826db2", "#6f5d99", "#594a7b", "#7763a3", "#564777", "#8b75be", "#7a66a6", "#917ac6", "#7962aa", "#7862a9", "#9176cb", "#7d66b0", "#866dbc", "#6b5797", "#685493", "#8b71c3", "#8e74c7", "#604b8c", "#7960af", "#9576d6", "#8166ba", "#8166ba", "#7e64b6", "#785fae", "#9476d5", "#8f71cd", "#6c52a1", "#9472da", "#8768c8", "#8a6acc", "#7a5db4", "#684f9b", "#6d53a2", "#634b94", "#5f478e" };
	background_hex = { "#5c5c5c","#7e7e7e","#727271","#666665","#6a6a6a","#515150","#7c7d7c","#7d7d7c","#565656","#585857","#595a59","#848484","#868786","#727272","#727272","#7f7f7e","#7d7e7d","#818281","#4d4e4d","#5a5a5a","#7e7e7e","#7c7d7c","#848484","#666666","#6d6d6c","#6c6c6c","#7a7a79","#7c7c7b","#666665","#666665","#868686","#535453","#797a79","#5a5a5a","#5d5d5d","#6b6c6b","#525251","#616160","#595a59","#737373","#777776","#6f6f6f","#555555","#757575","#676867","#878786","#787878","#7a7a79","#757574","#6d6e6d","#7d7d7d","#555655","#7b7b7a","#636363","#858584","#676766","#7c7c7b","#757575","#797978","#535353","#515150","#6f6f6e","#828382","#848483","#838483","#717171","#777776","#7b7b7b","#666666","#7a7a79","#818181","#666666","#666665","#707070","#5d5d5d","#707170","#666666","#757575","#7d7d7d","#757574","#80807f","#505150","#565656","#848483","#878787","#777777","#777776","#606160","#6d6d6d","#858584","#7b7b7b","#505050","#5e5e5e","#595959","#696a69","#515150","#4f4f4e","#6c6c6c","#5c5c5c" };
	threshold_along_confusion_lines = { 0, 0, 0 };
	//placeholders
}

void ATriVectorManager::ColorThesePlates(TArray<AStaticMeshActor*> ovalPlates, int32 coloredPlate)
{
	//background coloring
	int selected_color;
	FColor current_color_;
	FLinearColor current_color;
	for (int32 i = 0; i < ovalPlates.Num(); i++) {
		UMaterialInstanceDynamic* plate_material = ovalPlates[i]->GetStaticMeshComponent()->CreateAndSetMaterialInstanceDynamic(0);
		selected_color = FMath::RandRange(0, background_hex.Num()-1);
		current_color_ = FColor::FromHex(background_hex[selected_color]);
		current_color = FLinearColor(current_color_);
		if (plate_material)
		{
			plate_material->SetVectorParameterValue(TEXT("plate"), current_color);
		}
	}

	trivector_selected = FMath::RandRange(0, 2);
	selected_color = threshold_along_confusion_lines[trivector_selected];
	if(selected_color<9) threshold_along_confusion_lines[trivector_selected]++;
	//foreground coloring
	for (int32 i = 0; i < all_plates[coloredPlate].normal_f.Num(); i++) {
		int32 j = all_plates[coloredPlate].normal_f[i];
		j = j > 211 ? j : j - 1;
		UMaterialInstanceDynamic* plate_material = ovalPlates[j]->GetStaticMeshComponent()->CreateAndSetMaterialInstanceDynamic(0);
		
		int selected_color_ = FMath::RandRange(selected_color*9, selected_color*9+8);
		if (trivector_selected == 0) {
			current_color_ = FColor::FromHex(protan_hex[selected_color_]);
		}
		else if (trivector_selected == 1) {
			current_color_ = FColor::FromHex(deutan_hex[selected_color_]);
		}
		else {
			current_color_ = FColor::FromHex(tritan_hex[selected_color_]);
		}
		current_color = FLinearColor(current_color_);
		if (plate_material)
		{
			plate_material->SetVectorParameterValue(TEXT("plate"), current_color);
		}
	}
	return;
}

void ATriVectorManager::AssessResponses(TMap<int32, FString> responses, FString& out)
{
	TArray<int32> count = { 0, 0, 0, 0, 0 };
	for (int32 i = 0; i < all_plates.Num(); i++)
	{
		for (int32 j = 0; j < 5; j++)
		{
			if (responses.Find(i)->Equals(all_plates[i].validResponses[j])) count[j]++;
		}
	}
	int32 max = -1, max_idx = -1;
	for (int32 j = 0; j < 5; j++)
	{
		if (max < count[j]) {
			max = count[j];
			max_idx = j;
		}
		GEngine->AddOnScreenDebugMessage(-1, 5.f, FColor::White, FString::Printf(TEXT("%d\n"), count[j]));
	}

	GEngine->AddOnScreenDebugMessage(-1, 5.f, FColor::White, FString::Printf(TEXT("MAX_IDX: %d"), max_idx));
	TArray<FString> which = { "normal","strong_protan", "mild_protan", "strong_deutan", "mild_deutan" };
	if (max_idx >= 0) out = which[max_idx];
	else out = "uncertain";
	return;
}